{"ast":null,"code":"var _import$meta, _import$meta$env;\nexport const API_URL = ((_import$meta = import.meta) === null || _import$meta === void 0 ? void 0 : (_import$meta$env = _import$meta.env) === null || _import$meta$env === void 0 ? void 0 : _import$meta$env.VITE_API_URL) || process.env.REACT_APP_API_URL || \"http://localhost:8080\";\nasync function request(path, init) {\n  const res = await fetch(`${API_URL}${path}`, {\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    ...init\n  });\n  if (!res.ok) {\n    let msg = `${res.status} ${res.statusText}`;\n    try {\n      const j = await res.json();\n      if (j !== null && j !== void 0 && j.error) msg = j.error;\n    } catch {}\n    throw new Error(msg);\n  }\n  return await res.json();\n}\nexport const getJSON = path => request(path);\nexport const postJSON = (path, body) => request(path, {\n  method: \"POST\",\n  body: JSON.stringify(body)\n});","map":{"version":3,"names":["API_URL","_import$meta","import","meta","_import$meta$env","env","VITE_API_URL","process","REACT_APP_API_URL","request","path","init","res","fetch","credentials","headers","ok","msg","status","statusText","j","json","error","Error","getJSON","postJSON","body","method","JSON","stringify"],"sources":["C:/Users/SÃ¼leyman/Desktop/FoodOrdering/frontend/src/store/api.ts"],"sourcesContent":["export const API_URL =\r\n  (import.meta as any)?.env?.VITE_API_URL ||\r\n  process.env.REACT_APP_API_URL ||\r\n  \"http://localhost:8080\";\r\n\r\nasync function request<T>(path: string, init?: RequestInit): Promise<T> {\r\n  const res = await fetch(`${API_URL}${path}`, {\r\n    credentials: \"include\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    ...init,\r\n  });\r\n  if (!res.ok) {\r\n    let msg = `${res.status} ${res.statusText}`;\r\n    try {\r\n      const j = await res.json();\r\n      if (j?.error) msg = j.error;\r\n    } catch {}\r\n    throw new Error(msg);\r\n  }\r\n  return (await res.json()) as T;\r\n}\r\n\r\nexport const getJSON = <T>(path: string) => request<T>(path);\r\n\r\nexport const postJSON = <T>(path: string, body: unknown) =>\r\n  request<T>(path, { method: \"POST\", body: JSON.stringify(body) });\r\n"],"mappings":";AAAA,OAAO,MAAMA,OAAO,GAClB,EAAAC,YAAA,GAACC,MAAM,CAACC,IAAI,cAAAF,YAAA,wBAAAG,gBAAA,GAAZH,YAAA,CAAsBI,GAAG,cAAAD,gBAAA,uBAAzBA,gBAAA,CAA2BE,YAAY,KACvCC,OAAO,CAACF,GAAG,CAACG,iBAAiB,IAC7B,uBAAuB;AAEzB,eAAeC,OAAOA,CAAIC,IAAY,EAAEC,IAAkB,EAAc;EACtE,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGb,OAAO,GAAGU,IAAI,EAAE,EAAE;IAC3CI,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/C,GAAGJ;EACL,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACI,EAAE,EAAE;IACX,IAAIC,GAAG,GAAG,GAAGL,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACO,UAAU,EAAE;IAC3C,IAAI;MACF,MAAMC,CAAC,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;MAC1B,IAAID,CAAC,aAADA,CAAC,eAADA,CAAC,CAAEE,KAAK,EAAEL,GAAG,GAAGG,CAAC,CAACE,KAAK;IAC7B,CAAC,CAAC,MAAM,CAAC;IACT,MAAM,IAAIC,KAAK,CAACN,GAAG,CAAC;EACtB;EACA,OAAQ,MAAML,GAAG,CAACS,IAAI,CAAC,CAAC;AAC1B;AAEA,OAAO,MAAMG,OAAO,GAAOd,IAAY,IAAKD,OAAO,CAAIC,IAAI,CAAC;AAE5D,OAAO,MAAMe,QAAQ,GAAGA,CAAIf,IAAY,EAAEgB,IAAa,KACrDjB,OAAO,CAAIC,IAAI,EAAE;EAAEiB,MAAM,EAAE,MAAM;EAAED,IAAI,EAAEE,IAAI,CAACC,SAAS,CAACH,IAAI;AAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}