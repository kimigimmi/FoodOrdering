{"ast":null,"code":"var _env;\n// frontend/src/lib/api.ts\nexport const API_URL = ((_env = import.meta.env) === null || _env === void 0 ? void 0 : _env.VITE_API_URL) || process.env.REACT_APP_API_URL || \"http://localhost:8080\";\nexport async function getJSON(path, init) {\n  const res = await fetch(`${API_URL}${path}`, {\n    credentials: \"include\",\n    ...init\n  });\n  if (!res.ok) throw new Error(await res.text().catch(() => \"Request failed\"));\n  return res.json();\n}\n\n// 2 generic: <Response, Request>\nexport async function postJSON(path, body, init) {\n  const res = await fetch(`${API_URL}${path}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"include\",\n    body: JSON.stringify(body),\n    ...init\n  });\n  if (!res.ok) throw new Error(await res.text().catch(() => \"Request failed\"));\n  return res.json();\n}","map":{"version":3,"names":["API_URL","_env","import","meta","env","VITE_API_URL","process","REACT_APP_API_URL","getJSON","path","init","res","fetch","credentials","ok","Error","text","catch","json","postJSON","body","method","headers","JSON","stringify"],"sources":["C:/Users/SÃ¼leyman/Desktop/FoodOrdering/frontend/src/store/commentsSlice.ts"],"sourcesContent":["// frontend/src/lib/api.ts\r\nexport const API_URL =\r\n  (import.meta as any).env?.VITE_API_URL ||\r\n  (process.env as any).REACT_APP_API_URL ||\r\n  \"http://localhost:8080\";\r\n\r\nexport async function getJSON<TRes>(path: string, init?: RequestInit): Promise<TRes> {\r\n  const res = await fetch(`${API_URL}${path}`, {\r\n    credentials: \"include\",\r\n    ...init,\r\n  });\r\n  if (!res.ok) throw new Error(await res.text().catch(() => \"Request failed\"));\r\n  return res.json() as Promise<TRes>;\r\n}\r\n\r\n// 2 generic: <Response, Request>\r\nexport async function postJSON<TRes, TReq = unknown>(\r\n  path: string,\r\n  body: TReq,\r\n  init?: RequestInit\r\n): Promise<TRes> {\r\n  const res = await fetch(`${API_URL}${path}`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    credentials: \"include\",\r\n    body: JSON.stringify(body),\r\n    ...init,\r\n  });\r\n  if (!res.ok) throw new Error(await res.text().catch(() => \"Request failed\"));\r\n  return res.json() as Promise<TRes>;\r\n}\r\n"],"mappings":";AAAA;AACA,OAAO,MAAMA,OAAO,GAClB,EAAAC,IAAA,GAACC,MAAM,CAACC,IAAI,CAASC,GAAG,cAAAH,IAAA,uBAAxBA,IAAA,CAA0BI,YAAY,KACrCC,OAAO,CAACF,GAAG,CAASG,iBAAiB,IACtC,uBAAuB;AAEzB,OAAO,eAAeC,OAAOA,CAAOC,IAAY,EAAEC,IAAkB,EAAiB;EACnF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,OAAO,GAAGS,IAAI,EAAE,EAAE;IAC3CI,WAAW,EAAE,SAAS;IACtB,GAAGH;EACL,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,gBAAgB,CAAC,CAAC;EAC5E,OAAON,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB;;AAEA;AACA,OAAO,eAAeC,QAAQA,CAC5BV,IAAY,EACZW,IAAU,EACVV,IAAkB,EACH;EACf,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGZ,OAAO,GAAGS,IAAI,EAAE,EAAE;IAC3CY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CT,WAAW,EAAE,SAAS;IACtBO,IAAI,EAAEG,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IAC1B,GAAGV;EACL,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,MAAM,gBAAgB,CAAC,CAAC;EAC5E,OAAON,GAAG,CAACO,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}