{"ast":null,"code":"var _process$env$REACT_AP;\n// Single source of truth for the backend URL\n// You can override with: REACT_APP_API_URL=http://localhost:8080\nexport const API_URL = ((_process$env$REACT_AP = process.env.REACT_APP_API_URL) !== null && _process$env$REACT_AP !== void 0 ? _process$env$REACT_AP : \"http://localhost:8080\") + \"/api\";\n\n// Small helpers around fetch -----------------------------------------------\n\nasync function handle(res) {\n  if (!res.ok) {\n    // Try to surface server message if present\n    const msg = await res.text().catch(() => res.statusText);\n    throw new Error(msg || `HTTP ${res.status}`);\n  }\n  // 204 No Content\n  if (res.status === 204) return undefined;\n  return await res.json();\n}\nexport async function getJSON(path, init) {\n  var _init$headers;\n  const res = await fetch(API_URL + path, {\n    credentials: \"include\",\n    ...init,\n    method: \"GET\",\n    headers: {\n      ...((_init$headers = init === null || init === void 0 ? void 0 : init.headers) !== null && _init$headers !== void 0 ? _init$headers : {})\n    }\n  });\n  return handle(res);\n}\nexport async function postJSON(path, body, init) {\n  var _init$headers2;\n  const res = await fetch(API_URL + path, {\n    credentials: \"include\",\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...((_init$headers2 = init === null || init === void 0 ? void 0 : init.headers) !== null && _init$headers2 !== void 0 ? _init$headers2 : {})\n    },\n    body: JSON.stringify(body),\n    ...init\n  });\n  return handle(res);\n}\nexport async function putJSON(path, body, init) {\n  var _init$headers3;\n  const res = await fetch(API_URL + path, {\n    credentials: \"include\",\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...((_init$headers3 = init === null || init === void 0 ? void 0 : init.headers) !== null && _init$headers3 !== void 0 ? _init$headers3 : {})\n    },\n    body: JSON.stringify(body),\n    ...init\n  });\n  return handle(res);\n}\nexport async function delJSON(path, init) {\n  var _init$headers4;\n  const res = await fetch(API_URL + path, {\n    credentials: \"include\",\n    method: \"DELETE\",\n    headers: {\n      ...((_init$headers4 = init === null || init === void 0 ? void 0 : init.headers) !== null && _init$headers4 !== void 0 ? _init$headers4 : {})\n    },\n    ...init\n  });\n  return handle(res);\n}","map":{"version":3,"names":["API_URL","_process$env$REACT_AP","process","env","REACT_APP_API_URL","handle","res","ok","msg","text","catch","statusText","Error","status","undefined","json","getJSON","path","init","_init$headers","fetch","credentials","method","headers","postJSON","body","_init$headers2","JSON","stringify","putJSON","_init$headers3","delJSON","_init$headers4"],"sources":["C:/Users/SÃ¼leyman/Desktop/FoodOrdering/frontend/src/lib/api.ts"],"sourcesContent":["// Single source of truth for the backend URL\r\n// You can override with: REACT_APP_API_URL=http://localhost:8080\r\nexport const API_URL =\r\n  (process.env.REACT_APP_API_URL ?? \"http://localhost:8080\") + \"/api\";\r\n\r\n// Small helpers around fetch -----------------------------------------------\r\n\r\nasync function handle<T>(res: Response): Promise<T> {\r\n  if (!res.ok) {\r\n    // Try to surface server message if present\r\n    const msg = await res.text().catch(() => res.statusText);\r\n    throw new Error(msg || `HTTP ${res.status}`);\r\n  }\r\n  // 204 No Content\r\n  if (res.status === 204) return undefined as unknown as T;\r\n  return (await res.json()) as T;\r\n}\r\n\r\nexport async function getJSON<T = any>(path: string, init?: RequestInit) {\r\n  const res = await fetch(API_URL + path, {\r\n    credentials: \"include\",\r\n    ...init,\r\n    method: \"GET\",\r\n    headers: {\r\n      ...(init?.headers ?? {}),\r\n    },\r\n  });\r\n  return handle<T>(res);\r\n}\r\n\r\nexport async function postJSON<T = any>(\r\n  path: string,\r\n  body: unknown,\r\n  init?: RequestInit\r\n) {\r\n  const res = await fetch(API_URL + path, {\r\n    credentials: \"include\",\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\", ...(init?.headers ?? {}) },\r\n    body: JSON.stringify(body),\r\n    ...init,\r\n  });\r\n  return handle<T>(res);\r\n}\r\n\r\nexport async function putJSON<T = any>(\r\n  path: string,\r\n  body: unknown,\r\n  init?: RequestInit\r\n) {\r\n  const res = await fetch(API_URL + path, {\r\n    credentials: \"include\",\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\", ...(init?.headers ?? {}) },\r\n    body: JSON.stringify(body),\r\n    ...init,\r\n  });\r\n  return handle<T>(res);\r\n}\r\n\r\nexport async function delJSON<T = any>(path: string, init?: RequestInit) {\r\n  const res = await fetch(API_URL + path, {\r\n    credentials: \"include\",\r\n    method: \"DELETE\",\r\n    headers: { ...(init?.headers ?? {}) },\r\n    ...init,\r\n  });\r\n  return handle<T>(res);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}