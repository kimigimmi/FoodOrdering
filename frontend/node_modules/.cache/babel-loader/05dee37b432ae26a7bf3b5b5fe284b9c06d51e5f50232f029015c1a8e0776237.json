{"ast":null,"code":"// frontend/src/store/commentsSlice.ts\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getJSON, postJSON } from \"../lib/api\";\n\n/** Backend'in döndürdüğü comment modeli */\n\nconst initialState = {\n  data: [],\n  loading: false,\n  error: null\n};\n\n/** GET /api/comments */\nexport const fetchComments = createAsyncThunk(\"comments/fetch\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    return await getJSON(\"/api/comments\");\n  } catch (err) {\n    return rejectWithValue((err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch comments\");\n  }\n});\n\n/** POST /api/comments  (body: { name, text }) */\nexport const addComment = createAsyncThunk(\"comments/add\", async (payload, {\n  rejectWithValue\n}) => {\n  try {\n    // DİKKAT: postJSON yalnızca tek tip argümanı (Response tipi) kabul eder.\n    // Body için ikinci tip verilmez; payload'ı doğrudan geçiriyoruz.\n    return await postJSON(\"/api/comments\", payload);\n  } catch (err) {\n    return rejectWithValue((err === null || err === void 0 ? void 0 : err.message) || \"Failed to add comment\");\n  }\n});\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    // fetch\n    builder.addCase(fetchComments.pending, state => {\n      state.loading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchComments.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    });\n    builder.addCase(fetchComments.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || \"Failed to fetch comments\";\n    });\n\n    // add\n    builder.addCase(addComment.pending, state => {\n      state.error = null;\n    });\n    builder.addCase(addComment.fulfilled, (state, action) => {\n      state.data.unshift(action.payload);\n    });\n    builder.addCase(addComment.rejected, (state, action) => {\n      state.error = action.payload || \"Failed to add comment\";\n    });\n  }\n});\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","getJSON","postJSON","initialState","data","loading","error","fetchComments","_","rejectWithValue","err","message","addComment","payload","commentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","unshift","reducer"],"sources":["C:/Users/Süleyman/Desktop/FoodOrdering/frontend/src/store/commentsSlice.ts"],"sourcesContent":["// frontend/src/store/commentsSlice.ts\r\nimport { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { getJSON, postJSON } from \"../lib/api\";\r\n\r\n/** Backend'in döndürdüğü comment modeli */\r\nexport type CommentModel = {\r\n  id: number;\r\n  name: string;\r\n  text: string;\r\n  createdAt?: string;\r\n};\r\n\r\ntype AddCommentReq = {\r\n  name: string;\r\n  text: string;\r\n};\r\n\r\ntype State = {\r\n  data: CommentModel[];\r\n  loading: boolean;\r\n  error: string | null;\r\n};\r\n\r\nconst initialState: State = {\r\n  data: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n/** GET /api/comments */\r\nexport const fetchComments = createAsyncThunk<\r\n  CommentModel[],\r\n  void,\r\n  { rejectValue: string }\r\n>(\"comments/fetch\", async (_: void, { rejectWithValue }) => {\r\n  try {\r\n    return await getJSON<CommentModel[]>(\"/api/comments\");\r\n  } catch (err: any) {\r\n    return rejectWithValue(err?.message || \"Failed to fetch comments\");\r\n  }\r\n});\r\n\r\n/** POST /api/comments  (body: { name, text }) */\r\nexport const addComment = createAsyncThunk<\r\n  CommentModel,\r\n  AddCommentReq,\r\n  { rejectValue: string }\r\n>(\"comments/add\", async (payload, { rejectWithValue }) => {\r\n  try {\r\n    // DİKKAT: postJSON yalnızca tek tip argümanı (Response tipi) kabul eder.\r\n    // Body için ikinci tip verilmez; payload'ı doğrudan geçiriyoruz.\r\n    return await postJSON<CommentModel>(\"/api/comments\", payload);\r\n  } catch (err: any) {\r\n    return rejectWithValue(err?.message || \"Failed to add comment\");\r\n  }\r\n});\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    // fetch\r\n    builder.addCase(fetchComments.pending, (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    });\r\n    builder.addCase(\r\n      fetchComments.fulfilled,\r\n      (state, action: PayloadAction<CommentModel[]>) => {\r\n        state.loading = false;\r\n        state.data = action.payload;\r\n      }\r\n    );\r\n    builder.addCase(fetchComments.rejected, (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload || \"Failed to fetch comments\";\r\n    });\r\n\r\n    // add\r\n    builder.addCase(addComment.pending, (state) => {\r\n      state.error = null;\r\n    });\r\n    builder.addCase(\r\n      addComment.fulfilled,\r\n      (state, action: PayloadAction<CommentModel>) => {\r\n        state.data.unshift(action.payload);\r\n      }\r\n    );\r\n    builder.addCase(addComment.rejected, (state, action) => {\r\n      state.error = action.payload || \"Failed to add comment\";\r\n    });\r\n  },\r\n});\r\n\r\nexport default commentsSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAC/E,SAASC,OAAO,EAAEC,QAAQ,QAAQ,YAAY;;AAE9C;;AAmBA,MAAMC,YAAmB,GAAG;EAC1BC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGR,gBAAgB,CAI3C,gBAAgB,EAAE,OAAOS,CAAO,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC1D,IAAI;IACF,OAAO,MAAMR,OAAO,CAAiB,eAAe,CAAC;EACvD,CAAC,CAAC,OAAOS,GAAQ,EAAE;IACjB,OAAOD,eAAe,CAAC,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,OAAO,KAAI,0BAA0B,CAAC;EACpE;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAGb,gBAAgB,CAIxC,cAAc,EAAE,OAAOc,OAAO,EAAE;EAAEJ;AAAgB,CAAC,KAAK;EACxD,IAAI;IACF;IACA;IACA,OAAO,MAAMP,QAAQ,CAAe,eAAe,EAAEW,OAAO,CAAC;EAC/D,CAAC,CAAC,OAAOH,GAAQ,EAAE;IACjB,OAAOD,eAAe,CAAC,CAAAC,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,OAAO,KAAI,uBAAuB,CAAC;EACjE;AACF,CAAC,CAAC;AAEF,MAAMG,aAAa,GAAGd,WAAW,CAAC;EAChCe,IAAI,EAAE,UAAU;EAChBZ,YAAY;EACZa,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACZ,aAAa,CAACa,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAAChB,OAAO,GAAG,IAAI;MACpBgB,KAAK,CAACf,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFY,OAAO,CAACC,OAAO,CACbZ,aAAa,CAACe,SAAS,EACvB,CAACD,KAAK,EAAEE,MAAqC,KAAK;MAChDF,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACjB,IAAI,GAAGmB,MAAM,CAACV,OAAO;IAC7B,CACF,CAAC;IACDK,OAAO,CAACC,OAAO,CAACZ,aAAa,CAACiB,QAAQ,EAAE,CAACH,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACf,KAAK,GAAGiB,MAAM,CAACV,OAAO,IAAI,0BAA0B;IAC5D,CAAC,CAAC;;IAEF;IACAK,OAAO,CAACC,OAAO,CAACP,UAAU,CAACQ,OAAO,EAAGC,KAAK,IAAK;MAC7CA,KAAK,CAACf,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC;IACFY,OAAO,CAACC,OAAO,CACbP,UAAU,CAACU,SAAS,EACpB,CAACD,KAAK,EAAEE,MAAmC,KAAK;MAC9CF,KAAK,CAACjB,IAAI,CAACqB,OAAO,CAACF,MAAM,CAACV,OAAO,CAAC;IACpC,CACF,CAAC;IACDK,OAAO,CAACC,OAAO,CAACP,UAAU,CAACY,QAAQ,EAAE,CAACH,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACf,KAAK,GAAGiB,MAAM,CAACV,OAAO,IAAI,uBAAuB;IACzD,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,eAAeC,aAAa,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}