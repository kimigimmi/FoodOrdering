{"ast":null,"code":"// frontend/src/lib/api.ts\n\n// CRA (react-scripts) kullanıyorsan env değişkenleri REACT_APP_ ile başlar.\n// .env.development.local içinde REACT_APP_API_URL tanımlıysa onu, yoksa 8080'i kullan.\nexport const API_URL = process.env.REACT_APP_API_URL || \"http://localhost:8080\";\n\n/** Basit yardımcı: HTTP error’ları throw eder */\nasync function request(path, options = {}) {\n  const res = await fetch(`${API_URL}${path}`, {\n    credentials: \"include\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...(options.headers || {})\n    },\n    ...options\n  });\n  if (!res.ok) {\n    // Sunucunun döndürdüğü hata mesajı varsa al\n    let msg = `${res.status} ${res.statusText}`;\n    try {\n      const data = await res.json();\n      if (data !== null && data !== void 0 && data.error) msg = data.error;\n    } catch {\n      /* yoksay */\n    }\n    throw new Error(msg);\n  }\n\n  // No content durumunu destekle\n  if (res.status === 204) return undefined;\n  return await res.json();\n}\n\n/** GET helper */\nexport function getJSON(path) {\n  return request(path, {\n    method: \"GET\"\n  });\n}\n\n/** POST helper */\nexport function postJSON(path, body) {\n  return request(path, {\n    method: \"POST\",\n    body: body ? JSON.stringify(body) : undefined\n  });\n}\n\n/** PUT helper (gerekirse) */\nexport function putJSON(path, body) {\n  return request(path, {\n    method: \"PUT\",\n    body: body ? JSON.stringify(body) : undefined\n  });\n}\n\n/** DELETE helper (gerekirse) */\nexport function delJSON(path) {\n  return request(path, {\n    method: \"DELETE\"\n  });\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","request","path","options","res","fetch","credentials","headers","ok","msg","status","statusText","data","json","error","Error","undefined","getJSON","method","postJSON","body","JSON","stringify","putJSON","delJSON"],"sources":["C:/Users/Süleyman/Desktop/FoodOrdering/frontend/src/lib/api.ts"],"sourcesContent":["// frontend/src/lib/api.ts\r\n\r\n// CRA (react-scripts) kullanıyorsan env değişkenleri REACT_APP_ ile başlar.\r\n// .env.development.local içinde REACT_APP_API_URL tanımlıysa onu, yoksa 8080'i kullan.\r\nexport const API_URL =\r\n  (process.env.REACT_APP_API_URL as string) || \"http://localhost:8080\";\r\n\r\n/** Basit yardımcı: HTTP error’ları throw eder */\r\nasync function request<T>(\r\n  path: string,\r\n  options: RequestInit = {}\r\n): Promise<T> {\r\n  const res = await fetch(`${API_URL}${path}`, {\r\n    credentials: \"include\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      ...(options.headers || {}),\r\n    },\r\n    ...options,\r\n  });\r\n\r\n  if (!res.ok) {\r\n    // Sunucunun döndürdüğü hata mesajı varsa al\r\n    let msg = `${res.status} ${res.statusText}`;\r\n    try {\r\n      const data = await res.json();\r\n      if (data?.error) msg = data.error;\r\n    } catch {\r\n      /* yoksay */\r\n    }\r\n    throw new Error(msg);\r\n  }\r\n\r\n  // No content durumunu destekle\r\n  if (res.status === 204) return undefined as unknown as T;\r\n\r\n  return (await res.json()) as T;\r\n}\r\n\r\n/** GET helper */\r\nexport function getJSON<T>(path: string): Promise<T> {\r\n  return request<T>(path, { method: \"GET\" });\r\n}\r\n\r\n/** POST helper */\r\nexport function postJSON<T>(path: string, body?: unknown): Promise<T> {\r\n  return request<T>(path, {\r\n    method: \"POST\",\r\n    body: body ? JSON.stringify(body) : undefined,\r\n  });\r\n}\r\n\r\n/** PUT helper (gerekirse) */\r\nexport function putJSON<T>(path: string, body?: unknown): Promise<T> {\r\n  return request<T>(path, {\r\n    method: \"PUT\",\r\n    body: body ? JSON.stringify(body) : undefined,\r\n  });\r\n}\r\n\r\n/** DELETE helper (gerekirse) */\r\nexport function delJSON<T>(path: string): Promise<T> {\r\n  return request<T>(path, { method: \"DELETE\" });\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA,OAAO,MAAMA,OAAO,GACjBC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAe,uBAAuB;;AAEtE;AACA,eAAeC,OAAOA,CACpBC,IAAY,EACZC,OAAoB,GAAG,CAAC,CAAC,EACb;EACZ,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGR,OAAO,GAAGK,IAAI,EAAE,EAAE;IAC3CI,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,IAAIJ,OAAO,CAACI,OAAO,IAAI,CAAC,CAAC;IAC3B,CAAC;IACD,GAAGJ;EACL,CAAC,CAAC;EAEF,IAAI,CAACC,GAAG,CAACI,EAAE,EAAE;IACX;IACA,IAAIC,GAAG,GAAG,GAAGL,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACO,UAAU,EAAE;IAC3C,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;MAC7B,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,KAAK,EAAEL,GAAG,GAAGG,IAAI,CAACE,KAAK;IACnC,CAAC,CAAC,MAAM;MACN;IAAA;IAEF,MAAM,IAAIC,KAAK,CAACN,GAAG,CAAC;EACtB;;EAEA;EACA,IAAIL,GAAG,CAACM,MAAM,KAAK,GAAG,EAAE,OAAOM,SAAS;EAExC,OAAQ,MAAMZ,GAAG,CAACS,IAAI,CAAC,CAAC;AAC1B;;AAEA;AACA,OAAO,SAASI,OAAOA,CAAIf,IAAY,EAAc;EACnD,OAAOD,OAAO,CAAIC,IAAI,EAAE;IAAEgB,MAAM,EAAE;EAAM,CAAC,CAAC;AAC5C;;AAEA;AACA,OAAO,SAASC,QAAQA,CAAIjB,IAAY,EAAEkB,IAAc,EAAc;EACpE,OAAOnB,OAAO,CAAIC,IAAI,EAAE;IACtBgB,MAAM,EAAE,MAAM;IACdE,IAAI,EAAEA,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,GAAGJ;EACtC,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASO,OAAOA,CAAIrB,IAAY,EAAEkB,IAAc,EAAc;EACnE,OAAOnB,OAAO,CAAIC,IAAI,EAAE;IACtBgB,MAAM,EAAE,KAAK;IACbE,IAAI,EAAEA,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,GAAGJ;EACtC,CAAC,CAAC;AACJ;;AAEA;AACA,OAAO,SAASQ,OAAOA,CAAItB,IAAY,EAAc;EACnD,OAAOD,OAAO,CAAIC,IAAI,EAAE;IAAEgB,MAAM,EAAE;EAAS,CAAC,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}