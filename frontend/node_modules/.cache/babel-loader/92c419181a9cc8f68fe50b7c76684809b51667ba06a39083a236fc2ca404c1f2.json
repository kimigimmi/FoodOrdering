{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { API_URL, postJSON } from \"../lib/api\";\nconst initialState = {\n  data: [],\n  loading: false,\n  error: null\n};\nexport const fetchComments = createAsyncThunk(\"comments/fetch\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`${API_URL}/api/comments`, {\n      credentials: \"include\"\n    });\n    if (!res.ok) {\n      const txt = await res.text().catch(() => \"\");\n      throw new Error(txt || res.statusText);\n    }\n    return await res.json();\n  } catch (err) {\n    return rejectWithValue((err === null || err === void 0 ? void 0 : err.message) || \"Failed to fetch comments\");\n  }\n});\nexport const addComment = createAsyncThunk(\"comments/add\", async (payload, {\n  rejectWithValue\n}) => {\n  try {\n    // Backend: POST /api/comments { name, text }\n    return await postJSON(\"/api/comments\", payload);\n  } catch (err) {\n    return rejectWithValue((err === null || err === void 0 ? void 0 : err.message) || \"Failed to add comment\");\n  }\n});\nconst commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // fetch\n    .addCase(fetchComments.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchComments.fulfilled, (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n    }).addCase(fetchComments.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || \"Error\";\n    })\n    // add\n    .addCase(addComment.pending, state => {\n      state.error = null;\n    }).addCase(addComment.fulfilled, (state, action) => {\n      state.data.unshift(action.payload); // yeni yorumu liste başına ekle\n    }).addCase(addComment.rejected, (state, action) => {\n      state.error = action.payload || \"Error\";\n    });\n  }\n});\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","API_URL","postJSON","initialState","data","loading","error","fetchComments","_","rejectWithValue","res","fetch","credentials","ok","txt","text","catch","Error","statusText","json","err","message","addComment","payload","commentsSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","unshift","reducer"],"sources":["C:/Users/Süleyman/Desktop/FoodOrdering/frontend/src/store/commentsSlice.ts"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { API_URL, postJSON } from \"../lib/api\";\r\nimport type { CommentModel } from \"../types\";\r\n\r\ntype State = {\r\n  data: CommentModel[];\r\n  loading: boolean;\r\n  error?: string | null;\r\n};\r\n\r\nconst initialState: State = {\r\n  data: [],\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const fetchComments = createAsyncThunk<CommentModel[]>(\r\n  \"comments/fetch\",\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`${API_URL}/api/comments`, {\r\n        credentials: \"include\",\r\n      });\r\n      if (!res.ok) {\r\n        const txt = await res.text().catch(() => \"\");\r\n        throw new Error(txt || res.statusText);\r\n      }\r\n      return (await res.json()) as CommentModel[];\r\n    } catch (err: any) {\r\n      return rejectWithValue(err?.message || \"Failed to fetch comments\") as any;\r\n    }\r\n  }\r\n);\r\n\r\nexport const addComment = createAsyncThunk<\r\n  CommentModel,\r\n  { name: string; text: string }\r\n>(\"comments/add\", async (payload, { rejectWithValue }) => {\r\n  try {\r\n    // Backend: POST /api/comments { name, text }\r\n    return await postJSON<CommentModel>(\"/api/comments\", payload);\r\n  } catch (err: any) {\r\n    return rejectWithValue(err?.message || \"Failed to add comment\") as any;\r\n  }\r\n});\r\n\r\nconst commentsSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // fetch\r\n      .addCase(fetchComments.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchComments.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.data = action.payload;\r\n      })\r\n      .addCase(fetchComments.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = (action.payload as string) || \"Error\";\r\n      })\r\n      // add\r\n      .addCase(addComment.pending, (state) => {\r\n        state.error = null;\r\n      })\r\n      .addCase(addComment.fulfilled, (state, action) => {\r\n        state.data.unshift(action.payload); // yeni yorumu liste başına ekle\r\n      })\r\n      .addCase(addComment.rejected, (state, action) => {\r\n        state.error = (action.payload as string) || \"Error\";\r\n      });\r\n  },\r\n});\r\n\r\nexport default commentsSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}